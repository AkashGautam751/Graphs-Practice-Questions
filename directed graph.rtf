{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang2057{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
{\*\generator Riched20 10.0.17134}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\f0\fs22\lang9 import java.util.*;\par
\par
class AdjList \{\par
    int v;\par
    ArrayList<Integer> arr[];\par
    ArrayList<Integer> degree;\par
    int parent[];\par
    \par
    AdjList(int v) \{\par
        this.v = v;\par
        arr = new ArrayList[v];\par
        \par
        for(int i = 0; i < v; i++) \{\par
            arr[i] = new ArrayList<Integer>();\par
        \}\par
        degree = new ArrayList<Integer>();\par
        parent = new int[v];\par
        for(int i = 0; i < parent.length; i++) \{\par
            parent[i] = -1;\par
        \}\par
    \}\par
    \par
    void addEdge(int i, int j) \{\par
        arr[i].add(j);\par
    \}\par
    \par
    void print() \{\par
        for(int i = 0; i < v; i++) \{\par
            int x = arr[i].size();\par
            System.out.print(i);\par
            for(int j = 0; j < x; j++) \{\par
                System.out.print("->" + arr[i].get(j));\par
            \}\par
            System.out.println();\par
        \}\par
    \}\par
    \par
    int noSelfLoop() \{\par
        int s = 0;\par
        for(int i = 0; i < v; i++) \{\par
            int x = arr[i].size();\par
            for(int j = 0; j < x; j++) \{\par
                if( i == arr[i].get(j)) \{\par
                    s++;\par
                    break;\par
                \}\par
            \}\par
        \}\par
        return s;\par
    \}\par
    \par
    boolean checkSelfLoop(int i) \{\par
        int x = arr[i].size();\par
        \par
        for(int j = 0; j < x; j++) \{\par
            if(i == arr[i].get(j)) \{\par
                return true;\par
            \}\par
        \}\par
        \par
        return false;\par
    \}\par
    \par
    int findDegree(int i) \{\par
        return arr[i].size();\par
    \}\par
    \par
    ArrayList<Integer> findEachDegree() \{\par
        for(int i = 0; i < v; i++) \{\par
            int x = findDegree(i);\par
            degree.add(x);\par
        \}\par
        return degree;\par
    \}\par
    \par
    int noOfEdges() \{\par
        int s = 0, c = 0;\par
        for(int i = 0; i < v; i++) \{\par
            int x = arr[i].size();\par
            for(int j = 0; j < x; j++) \{\par
                if(i == arr[i].get(j))\par
                    s++;\par
                else\par
                    c++;\par
            \}\par
        \}\par
        return c + s;\par
    \}\par
    \par
    int vertex() \{\par
        return this.v;\par
    \}\par
    \par
    void DFSUtil(int v,boolean visited[]) \par
    \{ \par
        visited[v] = true; \par
        System.out.print(v + " "); \par
  \par
        Iterator<Integer> i = arr[v].listIterator(); \par
        while (i.hasNext()) \par
        \{ \par
            int n = i.next(); \par
            if (!visited[n]) \par
                DFSUtil(n,visited); \par
        \} \par
    \} \par
  \par
    void DFS() \par
    \{ \par
        boolean visited[] = new boolean[v]; \par
  \par
        for(int i = 0; i < v; ++i) \par
            if(visited[i] == false) \{\par
                DFSUtil(i, visited); \par
            \}\par
            \par
    \} \par
    \par
    int[] getParents(int node, int par) \{\par
        for(int i = 0 ; i < arr[node].size() ; ++i)\{\par
            if(arr[node].get(i) != par)\{\par
                if(parent[arr[node].get(i)] == -1) \{\par
                    parent[arr[node].get(i)] = node ; \par
                    getParents(arr[node].get(i) , node) ; \par
                \}\par
            \}\par
        \}\par
        \par
        return parent;\par
    \}\par
    \par
    int[] Parents() \{\par
        int parentt[] = new int[v];\par
        for(int i = 0; i < v; i++) \{\par
            parentt = getParents(i, -1);\par
        \}\par
        return parentt;\par
    \}\par
    \par
    \par
    boolean isCyclicUtil(int i, boolean[] visited, boolean[] recStack)  \par
    \{ \par
        if (recStack[i]) \par
            return true; \par
  \par
        if (visited[i]) \par
            return false; \par
              \par
        visited[i] = true; \par
  \par
        recStack[i] = true; \par
        List<Integer> children = arr[i]; \par
          \par
        for (Integer c: children) \par
            if (isCyclicUtil(c, visited, recStack)) \par
                return true; \par
                  \par
        recStack[i] = false; \par
  \par
        return false; \par
    \} \par
  \par
    boolean isCyclic()  \par
    \{ \par
        boolean[] visited = new boolean[v]; \par
        boolean[] recStack = new boolean[v]; \par
          \par
        for (int i = 0; i < v; i++) \par
            if (isCyclicUtil(i, visited, recStack)) \par
                return true; \par
  \par
        return false; \par
    \}\par
    \par
    AdjList getTranspose() \par
    \{ \par
        AdjList g = new AdjList(v); \par
        for (int ver = 0; ver < v; ver++) \par
        \{ \par
            Iterator<Integer> i = arr[ver].listIterator(); \par
            while(i.hasNext()) \par
                g.arr[i.next()].add(ver); \par
        \} \par
        return g; \par
    \} \par
  \par
    void fillOrder(int ver, boolean visited[], Stack stack) \par
    \{ \par
        visited[ver] = true; \par
  \par
        Iterator<Integer> i = arr[ver].iterator(); \par
        while (i.hasNext()) \par
        \{ \par
            int n = i.next(); \par
            if(!visited[n]) \par
                fillOrder(n, visited, stack); \par
        \} \par
  \par
        stack.push(new Integer(ver)); \par
    \} \par
  \par
    void printSCCs() \par
    \{ \par
        Stack stack = new Stack(); \par
  \par
        boolean visited[] = new boolean[v]; \par
        for(int i = 0; i < v; i++) \par
            visited[i] = false; \par
  \par
        for (int i = 0; i < v; i++) \par
            if (visited[i] == false) \par
                fillOrder(i, visited, stack); \par
  \par
        AdjList gr = getTranspose(); \par
  \par
        for (int i = 0; i < v; i++) \par
            visited[i] = false; \par
  \par
        while (stack.empty() == false) \par
        \{ \par
            int ver = (int)stack.pop(); \par
  \par
            if (visited[ver] == false) \par
            \{ \par
                gr.DFSUtil(ver, visited); \par
                System.out.println(); \par
            \} \par
        \}\par
    \par
    \}\par
    \par
\}\par
\par
public class Main \{\par
    \par
    public static void main(String args[]) \{\par
        AdjList a = new AdjList(7);\par
        // //a.addEdge(1, 1);\par
        // a.addEdge(1, 2);\par
        // a.addEdge(1, 3);\par
        // a.addEdge(1, 4);\par
        // a.addEdge(1, 0);\par
        // //a.addEdge(2, 2);\par
        // a.addEdge(2, 3);\par
        // a.addEdge(2, 4);    \par
        // a.addEdge(2, 0);\par
        // //a.addEdge(3, 3);    \par
        // a.addEdge(3, 4);\par
        // a.addEdge(3, 0);    \par
        // //a.addEdge(4, 4);\par
        // a.addEdge(4, 0);\par
        // a.addEdge(0, 5);\par
        // //a.addEdge(5, 0);\par
        \par
        a.addEdge(1, 0); \par
        a.addEdge(0, 2); \par
        a.addEdge(2, 1); \par
        a.addEdge(0, 3); \par
        a.addEdge(3, 4); \par
  \par
\par
        a.print();\par
        \par
        System.out.println("Number of self loops : " + a.noSelfLoop());\par
        System.out.println("This vertex has self loop or not : " + a.checkSelfLoop(4));\par
        \par
        System.out.println("Degree of this vertex : " + a.findDegree(1));\par
        System.out.println("Degree of every vertex : ");\par
        ArrayList<Integer> al = a.findEachDegree();\par
        Object arr[] = al.toArray();\par
        for(int i = 0; i < arr.length; i++) \{\par
            System.out.println(i + "->" + arr[i]);\par
        \}\par
        \par
        int max = Collections.max(al);\par
        System.out.println("Maximum degree = " + max);\par
        \par
        System.out.println("Number of edges : " + a.noOfEdges());\par
        System.out.println("Average degree : " + a.noOfEdges() / a.vertex());\par
        \par
        System.out.println("DFS traversal : ");\par
        a.DFS();\par
        \par
        System.out.println("\\nConnected components are : ");\par
        a.printSCCs();\par
        \par
        System.out.println("\\nCheck whether the graph has cycle or not : " + a.isCyclic());\par
        \par
        int parent[] = a.Parents();\par
        System.out.println("Parents are : ");\par
        for(int i = 0; i < parent.length; i++) \{\par
            System.out.print(parent[i] + " ");\par
        \}\par
        \par
        //System.out.println("\\nLca is =  " + a.LCA(2, 5, 0));\par
        \par
    \}\par
\}\par
}
 